<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>purplesyringa's blog</title>
		<link>https://purplesyringa.moe/blog/</link>
		<description>Posts from purplesyringa's blog.</description>
		<copyright>Alisa Sireneva, CC BY</copyright>
		<managingEditor>me@purplesyringa.moe (Alisa Sireneva)</managingEditor>
		<webMaster>me@purplesyringa.moe (Alisa Sireneva)</webMaster>
		<lastBuildDate>Sun, 17 Nov 2024 14:43:11 GMT</lastBuildDate>
		<docs>https://www.rssboard.org/rss-specification</docs>
		<ttl>60</ttl>
		<atom:link href="https://purplesyringa.moe/blog/feed.rss" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Any Python program fits in 24 characters*</title>
				<link>https://purplesyringa.moe/blog/./any-python-program-fits-in-24-characters/</link>
				<description>* If you don’t take whitespace into account.
My friend challenged me to find the shortest solution to a certain Leetcode-style problem in Python. They were generous enough to let me use whitespace for free, so that the code stays readable. So that’s exactly what we’ll abuse to encode any Python program in 24 bytes, ignoring whitespace.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				
				<guid>https://purplesyringa.moe/blog/./any-python-program-fits-in-24-characters/</guid>
				<pubDate>Sun, 17 Nov 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>The Rust Trademark Policy is still harmful</title>
				<link>https://purplesyringa.moe/blog/./the-rust-trademark-policy-is-still-harmful/</link>
				<description>Four days ago, the Rust Foundation released a new draft of the Rust Language Trademark Policy. The previous draft caused division within the community several years ago, prompting its retraction with the aim of creating a new, milder version.
Well, that failed. While certain issues were addressed (thank you, we appreciate it!), the new version remains excessively restrictive and, in my opinion, will harm both the Rust community as a whole and compiler and crate developers. While I expect the stricter rules to not be enforced in practice, I don’t want to constantly feel like I’m under threat while contributing to the Rust ecosystem, and this is exactly what it would feel like if this draft is finalized.
Below are some of my core objections to the draft.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://www.reddit.com/r/rust/comments/1gnz5sm/the_rust_trademark_policy_is_still_harmful/</comments>
				<guid>https://purplesyringa.moe/blog/./the-rust-trademark-policy-is-still-harmful/</guid>
				<pubDate>Sun, 10 Nov 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>Bringing faster exceptions to Rust</title>
				<link>https://purplesyringa.moe/blog/./bringing-faster-exceptions-to-rust/</link>
				<description>Three months ago, I wrote about why you might want to use panics for error handling. Even though it’s a catchy title, panics are hardly suited for this goal, even if you try to hack around with macros and libraries. The real star is the unwinding mechanism, which powers panics. This post is the first in a series exploring what unwinding is, how to speed it up, and how it can benefit Rust and C++ programmers.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://www.reddit.com/r/rust/comments/1gl050z/bringing_faster_exceptions_to_rust/</comments>
				<guid>https://purplesyringa.moe/blog/./bringing-faster-exceptions-to-rust/</guid>
				<pubDate>Wed, 06 Nov 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>We built the best &quot;Bad Apple!!&quot; in Minecraft</title>
				<link>https://purplesyringa.moe/blog/./we-built-the-best-bad-apple-in-minecraft/</link>
				<description>Demoscene is the art of pushing computers to perform tasks they weren’t designed to handle. One recurring theme in demoscene is the shadow-art animation “Bad Apple!!”. We’ve played it on the Commodore 64, Vectrex (a unique game console utilizing only vector graphics), Impulse Tracker, and even exploited Super Mario Bros. to play it.
But how about Bad Apple!!.. in Minecraft?</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://news.ycombinator.com/item?id=41798369</comments>
				<guid>https://purplesyringa.moe/blog/./we-built-the-best-bad-apple-in-minecraft/</guid>
				<pubDate>Thu, 10 Oct 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>Minecraft сравнивает массивы за куб</title>
				<link>https://purplesyringa.moe/blog/ru/minecraft-compares-arrays-in-cubic-time/</link>
				<description>Коллизии в играх обнаруживаются тяжелыми алгоритмами. Для примера попробуйте представить себе, насколько сложно это для просто двух произвольно повернутых кубов в пространстве. Они могут контактировать двумя ребрами, вершиной и гранью или еще как-то более сложно.
В майнкрафте вся геометрия хитбоксов параллельна осям координат, т.е. наклона не бывает. Это сильно упрощает поиск коллизий.
Я бы такое писала просто. Раз хитбокс блока — это объединение нескольких параллелепипедов, то можно его так и хранить: как список 6-элементных тьюплов. В подавляющем большинстве случаев этот список будет очень коротким. Для обычных кубов его длина — 1, для стеклопаналей может достигать 2, наковальня, о боги, состоит из 3 элементов, а стены могут иметь их аж целых 4. Для проверки хитбоксов на пересечение достаточно перебрать пары параллелепипедов двух хитбоксов (кажется, их может быть максимум 16). Для параллелепипедов с параллельными осями задача решается тривиально.
Но Minecraft JE писала не я, поэтому там реализация иная.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://t.me/alisa_rummages/156</comments>
				<guid>https://purplesyringa.moe/blog/ru/minecraft-compares-arrays-in-cubic-time/</guid>
				<pubDate>Sat, 14 Sep 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>WebP: The WebPage compression format</title>
				<link>https://purplesyringa.moe/blog/./webp-the-webpage-compression-format/nojs.html</link>
				<description>I want to provide a smooth experience to my site visitors, so I work on accessibility and ensure it works without JavaScript enabled. I care about page load time because some pages contain large illustrations, so I minify my HTML.
But one thing makes turning my blog light as a feather a pain in the ass.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://news.ycombinator.com/item?id=41475124</comments>
				<guid>https://purplesyringa.moe/blog/./webp-the-webpage-compression-format/</guid>
				<pubDate>Sat, 07 Sep 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>Division is hard, but it doesn&#39;t have to be</title>
				<link>https://purplesyringa.moe/blog/./division-is-hard-but-it-does-not-have-to-be/</link>
				<description>Developers don’t usually divide numbers all the time, but hashmaps often need to compute remainders modulo a prime. Hashmaps are really common, so fast division is useful.
For instance, rolling hashes might compute u128 % u64 with a fixed divisor. Compilers just drop the ball here:
fn modulo(n: u128) -> u64 {
(n % 0xffffffffffffffc5) as u64
}

modulo:
push rax
mov rdx, -59
xor ecx, ecx
call qword ptr [rip + __umodti3@GOTPCREL]
pop rcx
ret

__umodti3 is a generic long division implementation, and it’s slow and ugly.
I prefer my code the opposite of slow and ugly.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://www.reddit.com/r/programming/comments/1f0n8sk/division_is_hard_but_it_doesnt_have_to_be/</comments>
				<guid>https://purplesyringa.moe/blog/./division-is-hard-but-it-does-not-have-to-be/</guid>
				<pubDate>Sat, 24 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>I sped up serde_json strings by 20%</title>
				<link>https://purplesyringa.moe/blog/./i-sped-up-serde-json-strings-by-20-percent/</link>
				<description>I have recently done some performance work and realized that reading about my experience could be entertaining. Teaching to think is just as important as teaching to code, but this is seldom done; I think something I’ve done last month is a great opportunity to draw the curtain a bit.
serde is the Rust framework for serialization and deserialization. Everyone uses it, and it’s the default among the ecosystem. serde_json is the official serde “mixin” for JSON, so when people need to parse stuff, that’s what they use instinctively. There are other libraries for JSON parsing, like simd-json, but serde_json is overwhelmingly used: it has 26916 dependents at the time of this post, compared to only 66 for simd-json.
This makes serde_json a good target (not in a Jia Tan way) for optimization. Chances are, many of those 26916 users would profit from switching to simd-json, but as long as they aren’t doing that, smaller optimizations are better than nothing, and such improvements are reapt across the ecosystem.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://www.reddit.com/r/rust/comments/1eyxspu/i_sped_up_serde_json_strings_by_20/</comments>
				<guid>https://purplesyringa.moe/blog/./i-sped-up-serde-json-strings-by-20-percent/</guid>
				<pubDate>Tue, 20 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>The sentinel trick</title>
				<link>https://purplesyringa.moe/blog/./the-sentinel-trick/</link>
				<description>The sentinel trick underlies a data structure with the following requirements:

Read element by index in O ( 1 ) ,
Write element by index in O ( 1 ) ,
Replace all elements with a given value in O ( 1 ) .

It is not a novel technique by any means, but it doesn’t seem on everyone’s lips, so some of you might find it interesting.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://t.me/alisa_rummages/148</comments>
				<guid>https://purplesyringa.moe/blog/./the-sentinel-trick/</guid>
				<pubDate>Tue, 13 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>You might want to use panics for error handling</title>
				<link>https://purplesyringa.moe/blog/./you-might-want-to-use-panics-for-error-handling/</link>
				<description>Rust’s approach to error handling comes at a cost. The Result type often doesn’t fit in CPU registers, and callers of fallible functions have to check whether the returned value is Ok or Err. That’s a stack spill, a comparison, a branch, and a lot of error handling code intertwined with the hot path that just shouldn’t be here, which inhibits inlining, the most important optimization of all.
Exceptions and panics make it easy to forget about the occasional error, but they don’t suffer from inefficiency. Throwing an exception unwinds the stack automatically, without any cooperation from the functions except the one that throws the exception and the one that catches it. Wouldn’t it be neat if a mechanism with the performance of panic! and the ergonomics of Result existed?</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				
				<guid>https://purplesyringa.moe/blog/./you-might-want-to-use-panics-for-error-handling/</guid>
				<pubDate>Tue, 13 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>У base64 есть неподвижная точка</title>
				<link>https://purplesyringa.moe/blog/ru/base64-has-a-fixed-point/</link>
				<description>$ base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | head -1
Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVmpBeFYySkVU

$ base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | head -1
Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVmpBeFYySkVU</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://t.me/alisa_rummages/146</comments>
				<guid>https://purplesyringa.moe/blog/ru/base64-has-a-fixed-point/</guid>
				<pubDate>Sat, 03 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>I thought I was smart enough to play with fire</title>
				<link>https://purplesyringa.moe/blog/./i-thought-i-was-smart-enough-to-play-with-fire/</link>
				<description>blazingio cuts corners by design. It keeps the constant factor small and uses long forgotten algorithms people used before processors supported SIMD and integer division. But another limitation made this task much harder.
Size.
Professional libraries start exceeding the Codeforces limit of 64 KiB really fast. Code minification barely helps, and neither does resorting to ugly code. So I cut a corner I don’t typically cut.
Undefined Behavior.
These two words make a seasoned programmer shudder. But sidestepping UB increases code size so much the library can hardly be used on CF. So I took a gamble. I meticulously scanned every instance of UB I used intentionally and made sure the compiler had absolutely no reason to miscompile it. I wrote excessive tests and run them on CI on all architecture and OS combinations I could think of. I released the library without so much as a flaw. It worked like clockwork.
And then, 3 months later, I updated README, and all hell broke loose.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://codeforces.com/blog/entry/130661</comments>
				<guid>https://purplesyringa.moe/blog/./i-thought-i-was-smart-enough-to-play-with-fire/</guid>
				<pubDate>Thu, 20 Jun 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>Recovering garbled Bitcoin addresses</title>
				<link>https://purplesyringa.moe/blog/./recovering-garbled-bitcoin-addresses/</link>
				<description>ZeroNet is a decentralized network that enables dynamic sites, such as blogs and forums, unlike popular content-addressed storage networks that came later. Sites aren’t addressed by immutable hashes; instead, site updates are signed by Bitcoin addresses.
A moot point is that Bitcoin addresses are case-sensitive, and people are used to addresses being case-insensitive. Mistakes happen, and sometimes the only trail you have is a lower-cased address, like 1lbcfr7sahtd9cgdqo3htmtkv8lk4znx71.
Losing valuable information is a bad thing when you’re an archivist. Have we really lost access to the site if we only know the lower-cased address? Can we recover the original address somehow?</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				<comments>https://t.me/alisa_rummages/111</comments>
				<guid>https://purplesyringa.moe/blog/./recovering-garbled-bitcoin-addresses/</guid>
				<pubDate>Tue, 23 Apr 2024 00:00:00 GMT</pubDate>
			</item>
		
	</channel>
</rss>